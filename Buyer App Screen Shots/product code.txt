/*new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT | ItemTouchHelper.DOWN | ItemTouchHelper.UP) {

                        @Override
                        public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
                            Toast.makeText(BuyActivity.this, "on Move", Toast.LENGTH_SHORT).show();
                            return false;
                        }

                        @Override
                        public void onSwiped(final RecyclerView.ViewHolder viewHolder, int swipeDir) {
                            Toast.makeText(BuyActivity.this, "on Swiped ", Toast.LENGTH_SHORT).show();
                            //Remove swiped item from list and notify the RecyclerView
                            final AlertDialog ab = new AlertDialog.Builder(BuyActivity.this).create();
                            LayoutInflater inflater = (LayoutInflater) BuyActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                            View view = inflater.inflate(R.layout.alert_dialog, null);
                            ab.setView(view);

                            TextView tvtitleMsg = view.findViewById(R.id.tvTilteMsg);
                            tvtitleMsg.setText("You want to remove this product from buy cart");
                            CardView btnCancel = view.findViewById(R.id.btnCancel);
                            CardView btnOkay = view.findViewById(R.id.btnOkay);

                            btnOkay.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    pd = new ProgressDialog(BuyActivity.this);
                                    pd.setTitle("Removing");
                                    pd.setMessage("Please wait...");
                                    pd.show();

                                    final int position = viewHolder.getAdapterPosition();

                                    Cart cart = updatedCartList.get(position);
                                    Log.e("cart id", "===>" + cart.getCartId());
                                    CartService.CartApi cartApi = CartService.getCartApiInstance();
                                    Call<Cart> call = cartApi.removeProductFormCart(cart.getCartId());
                                    call.enqueue(new Callback<Cart>() {
                                        @Override
                                        public void onResponse(Call<Cart> call, Response<Cart> response) {
                                            Log.e("data", "========>" + response);
                                            if (response.code() == 200) {
                                                Cart c = response.body();
                                                updatedCartList.remove(position);
                                                pd.dismiss();
                                                adapter.notifyDataSetChanged();
                                                ab.dismiss();
                                            }
                                        }

                                        @Override
                                        public void onFailure(Call<Cart> call, Throwable t) {
                                            Log.e("failed", "=========>" + t);
                                        }
                                    });

                                }
                            });
                            btnCancel.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    ab.dismiss();
                                }
                            });
                            ab.show();
                        }
                    }).attachToRecyclerView(binding.rvBuy);
*/

/.................................................................../
package com.hardwaremartapi.controller;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.hardwaremartapi.bean.Product;
import com.hardwaremartapi.exception.ErrorDetails;
import com.hardwaremartapi.exception.ResourceNotFoundException;
import com.hardwaremartapi.service.ProductService;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutionException;

@RestController
@RequestMapping("/product")
public class ProductController {

	@Autowired
	ProductService productService;

	   @PostMapping("/save")
	   public ResponseEntity<Product> savedProduct(@RequestParam("file")MultipartFile file,
	   		@RequestParam("file2")MultipartFile file2,
	   		@RequestParam("file3")MultipartFile file3,
	   		@RequestParam("categoryId") String categoryId, @RequestParam("shopkeeperId") String shopkeeperId,
	   		@RequestParam("name") String name, @RequestParam("price") double price,
	   		@RequestParam("discount") double discount, @RequestParam("brand") String brand,
	   		@RequestParam("qtyInStock") int qtyInStock, @RequestParam("description") String description)		
	   		throws ResourceNotFoundException, IOException {

	   	if (file.isEmpty()) {
	   		throw new ResourceNotFoundException("File not found");
	   	}

	   	Product product = new Product();
	   	product.setCategoryId(categoryId);
	   	product.setShopkeeperId(shopkeeperId);
	   	product.setName(name);
	   	product.setPrice(price);
	   	product.setDiscount(discount);
	   	product.setBrand(brand);
	   	product.setDescription(description);
	   	product.setQtyInStock(qtyInStock);
	   	Product p = productService.savedproduct(file,file2,file3, product);
	   	return new ResponseEntity<Product>(p, HttpStatus.OK);
	   }
	
	@PostMapping("/")
	public ResponseEntity<Product> saveProduct(@RequestParam("file") MultipartFile file,
			@RequestParam("categoryId") String categoryId, @RequestParam("shopkeeperId") String shopkeeperId,
			@RequestParam("name") String name, @RequestParam("price") double price,
			@RequestParam("discount") double discount, @RequestParam("brand") String brand,
			@RequestParam("qtyInStock") int qtyInStock, @RequestParam("description") String description)
			throws ResourceNotFoundException, IOException {

		if (file.isEmpty()) {
			throw new ResourceNotFoundException("File not found");
		}

		Product product = new Product();
		product.setCategoryId(categoryId);
		product.setShopkeeperId(shopkeeperId);
		product.setName(name);
		product.setPrice(price);
		product.setDiscount(discount);
		product.setBrand(brand);
		product.setDescription(description);
		product.setQtyInStock(qtyInStock);
		Product p = productService.saveProduct(file, product);
		return new ResponseEntity<Product>(p, HttpStatus.OK);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Product> deleteProduct(@PathVariable("id") String id)
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		Product p = productService.deleteProduct(id);
		if (p != null) {
			return new ResponseEntity<Product>(p, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}

	@GetMapping("/view/{id}")
	public ResponseEntity<Product> viewProduct(@PathVariable("id") String id)
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		Product p = productService.viewProduct(id);
		if (p != null) {
			return new ResponseEntity<Product>(p, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}

	@GetMapping("/discount")
	public ResponseEntity<List<Product>> getProductByDiscount()
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		ArrayList<Product> productList = productService.getProductByDiscount();
		if (productList != null) {
			return new ResponseEntity<List<Product>>(productList, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}

	@GetMapping("/name/{name}")
	public ResponseEntity<List<Product>> searchProductByName(@PathVariable("name") String name)
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		ArrayList<Product> productList = productService.searchProductByName(name);
		if (productList != null) {
			return new ResponseEntity<List<Product>>(productList, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}

	@GetMapping("/productlist/{categoryId}")
	public ResponseEntity<List<Product>> getProductByCategory(@PathVariable("categoryId") String categoryId)
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		ArrayList<Product> productList = productService.getProductByCategory(categoryId);
		if (productList != null) {
			return new ResponseEntity<List<Product>>(productList, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}

	@GetMapping("/recent")
	public ResponseEntity<List<Product>> getRecentProducts() throws InterruptedException, ExecutionException {
		ArrayList<Product> productList = productService.getRecentProducts();
		return new ResponseEntity<List<Product>>(productList, HttpStatus.OK);
	}

	@PostMapping("/updateproduct")
	public ResponseEntity<Product> updateProduct(@RequestBody Product product)
			throws IOException, InterruptedException, ExecutionException {
		Product p = productService.updateProduct(product);
		return new ResponseEntity<Product>(p, HttpStatus.OK);

	}

	@PostMapping("/updateproductimg")
	public ResponseEntity<Product> updateProductImage(@RequestParam("file") MultipartFile file,
			@RequestParam("file2") MultipartFile file2,
			@RequestParam("file3") MultipartFile file3,
			@RequestParam("productId") String productId) throws InterruptedException, ExecutionException, IOException {
		Product p = productService.updateProductImage(file,file2,file3, productId);
		return new ResponseEntity<Product>(p, HttpStatus.OK);
	}
	
	@GetMapping("/shopkeeperproducts/{name}/{shopkeeperId}")
	public ResponseEntity<List<Product>> viewProductOfShopkeeper(@PathVariable("name") String name,
			@PathVariable("shopkeeperId") String id)
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		ArrayList<Product> productList = productService.viewProductOfShopkeeper(name, id);
		if (productList != null) {
			return new ResponseEntity<List<Product>>(productList, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}

	@GetMapping("/productlist/{categoryId}/{shopkeeperId}")
	public ResponseEntity<List<Product>> getProductByCategoryAndShopKeeper(
			@PathVariable("categoryId") String categoryId, @PathVariable("shopkeeperId") String shopkeeperId)
			throws InterruptedException, ExecutionException, ResourceNotFoundException {
		ArrayList<Product> productList = productService.getProductByCategoryAndShopKeeper(categoryId, shopkeeperId);
		if (productList != null) {
			return new ResponseEntity<List<Product>>(productList, HttpStatus.OK);
		} else {
			throw new ResourceNotFoundException("Product Not Found");
		}
	}
}


...........................................................................................

Product Service

package com.hardwaremartapi.service;

import java.io.IOException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.concurrent.ExecutionException;

import org.apache.commons.lang3.ObjectUtils.Null;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.google.api.core.ApiFuture;
import com.google.cloud.Timestamp;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.Query.Direction;
import com.google.cloud.firestore.QueryDocumentSnapshot;
import com.google.cloud.firestore.QuerySnapshot;
import com.google.firebase.cloud.FirestoreClient;
import com.hardwaremartapi.FileUtility;
import com.hardwaremartapi.bean.Product;

@Service
public class ProductService {

	public Product savedproduct(MultipartFile file, MultipartFile file2, MultipartFile file3, Product product)
			throws IOException {
		FileUtility fileUtility = new FileUtility();
		String imageUrl = fileUtility.uploadFile(file);
		product.setImageUrl(imageUrl);
		String secondImageUrl = fileUtility.uploadFile(file2);
		product.setSecondImageUrl(secondImageUrl);
		String thirdImageurl = fileUtility.uploadFile(file3);
		product.setThirdImageurl(thirdImageurl);
		Firestore fireStore = FirestoreClient.getFirestore();
		product.setTimestamp(System.currentTimeMillis());
		String productId = fireStore.collection("Product").document().getId().toString();
		product.setProductId(productId);
		fireStore.collection("Product").document(productId).set(product);
		return product;
	}

	public Product saveProduct(MultipartFile file, Product product) throws IOException {
		FileUtility fileUtility = new FileUtility();
		String imageUrl = fileUtility.uploadFile(file);
		product.setImageUrl(imageUrl);
		Firestore fireStore = FirestoreClient.getFirestore();
		product.setTimestamp(System.currentTimeMillis());
		String productId = fireStore.collection("Product").document().getId().toString();
		product.setProductId(productId);
		fireStore.collection("Product").document(productId).set(product);
		return product;
	}

	public Product deleteProduct(String id) throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		Product product = fireStore.collection("Product").document(id).get().get().toObject(Product.class);
		if (product != null) {
			fireStore.collection("Product").document(id).delete();
		}
		return product;
	}

	public Product viewProduct(String id) throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		Product product = fireStore.collection("Product").document(id).get().get().toObject(Product.class);
		return product;
	}

	public ArrayList<Product> searchProductByName(String name) throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		ArrayList<Product> pl = new ArrayList<Product>();
		ApiFuture<QuerySnapshot> apiFuture = fireStore.collection("Product").get();
		QuerySnapshot querySnapshot = apiFuture.get();
		List<QueryDocumentSnapshot> documentSnapshotList = querySnapshot.getDocuments();
		for (QueryDocumentSnapshot document : documentSnapshotList) {
			Product product = document.toObject(Product.class);
			name = name.toLowerCase();
			String doc = product.getName().toLowerCase();
			if (doc.contains(name)) {
				pl.add(product);
			}
		}
		return pl;
	}

	public ArrayList<Product> getProductByCategory(String id) throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		ArrayList<Product> pl = new ArrayList<Product>();
		ApiFuture<QuerySnapshot> apiFuture = fireStore.collection("Product").get();
		QuerySnapshot querySnapshot = apiFuture.get();
		List<QueryDocumentSnapshot> documentSnapshotList = querySnapshot.getDocuments();
		for (QueryDocumentSnapshot document : documentSnapshotList) {
			Product product = document.toObject(Product.class);
			if (id.equals(document.getString("categoryId"))) {
				pl.add(product);
			}
		}
		return pl;
	}

	public ArrayList<Product> getProductByDiscount() throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		ArrayList<Product> pl = new ArrayList<Product>();
		ApiFuture<QuerySnapshot> apiFuture = fireStore.collection("Product").orderBy("discount", Direction.DESCENDING)
				.limit(10).get();

		QuerySnapshot querySnapshot = apiFuture.get();
		List<QueryDocumentSnapshot> documentSnapshotList = querySnapshot.getDocuments();
		for (QueryDocumentSnapshot document : documentSnapshotList) {
			Product product = document.toObject(Product.class);
			double discount = product.getDiscount();
			if (discount > 0) {
				pl.add(product);
			}
		}
		return pl;
	}

	public ArrayList<Product> getRecentProducts() throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		ArrayList<Product> pl = new ArrayList<Product>();
		ApiFuture<QuerySnapshot> apiFuture = fireStore.collection("Product").orderBy("timestamp", Direction.DESCENDING)
				.limit(10).get();
		QuerySnapshot querySnapshot = apiFuture.get();
		List<QueryDocumentSnapshot> documentSnapshotList = querySnapshot.getDocuments();
		for (QueryDocumentSnapshot document : documentSnapshotList) {
			Product product = document.toObject(Product.class);
			pl.add(product);
		}
		return pl;
	}

	public Product updateProduct(Product product) throws IOException, InterruptedException, ExecutionException {

		Firestore fireStore = FirestoreClient.getFirestore();
		Product p0 = fireStore.collection("Product").document(product.getProductId()).get().get()
				.toObject(Product.class);
		product.setTimestamp(System.currentTimeMillis());
		product.setShopkeeperId(p0.getShopkeeperId());
		product.setImageUrl(p0.getImageUrl());
		product.setSecondImageUrl(p0.getSecondImageUrl());
		product.setThirdImageurl(p0.getThirdImageurl());
		fireStore.collection("Product").document(product.getProductId()).set(product);
		return product;
	}

	public Product updateProductImage(MultipartFile file, MultipartFile file2, MultipartFile file3, String productId)
			throws InterruptedException, ExecutionException, IOException {
		Firestore fireStore = FirestoreClient.getFirestore();
		Product product = fireStore.collection("Product").document(productId).get().get().toObject(Product.class);
		FileUtility fileUtility = new FileUtility();
		String imageUrl = fileUtility.uploadFile(file);
		product.setImageUrl(imageUrl);
		String secondImageUrl = fileUtility.uploadFile(file2);
		product.setSecondImageUrl(secondImageUrl);
		String thirdImageurl = fileUtility.uploadFile(file3);
		product.setThirdImageurl(thirdImageurl);
		fireStore.collection("Product").document(productId).set(product);
		return product;
	}

	public ArrayList<Product> viewProductOfShopkeeper(String name, String id)
			throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		ArrayList<Product> pl = new ArrayList<Product>();
		ApiFuture<QuerySnapshot> apiFuture = fireStore.collection("Product").get();
		QuerySnapshot querySnapshot = apiFuture.get();
		List<QueryDocumentSnapshot> documentSnapshotList = querySnapshot.getDocuments();
		for (QueryDocumentSnapshot document : documentSnapshotList) {
			Product product = document.toObject(Product.class);
			name = name.toLowerCase();
			String doc = product.getName().toLowerCase();
			String doc2 = product.getShopkeeperId();
			if (doc.contains(name) && doc2.contains(id)) {
				pl.add(product);
			}
		}
		return pl;
	}

	public ArrayList<Product> getProductByCategoryAndShopKeeper(String categoryId, String shopkeeperId)
			throws InterruptedException, ExecutionException {
		Firestore fireStore = FirestoreClient.getFirestore();
		ArrayList<Product> pl = new ArrayList<Product>();
		ApiFuture<QuerySnapshot> apiFuture = fireStore.collection("Product").get();
		QuerySnapshot querySnapshot = apiFuture.get();
		List<QueryDocumentSnapshot> documentSnapshotList = querySnapshot.getDocuments();
		for (QueryDocumentSnapshot document : documentSnapshotList) {
			Product product = document.toObject(Product.class);
			if ((categoryId.equals(document.getString("categoryId")))
					&& (shopkeeperId.equals(document.getString("shopkeeperId")))) {
				pl.add(product);
			}
		}
		return pl;
	}
}
.........................................
#FDDA72